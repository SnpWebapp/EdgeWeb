var keystone = require('keystone'),
	passport = require('passport'),
	config = require('./oauth.js'),
	User = keystone.list('User'),
    LocalStrategy = require('passport-local').Strategy
	GoogleStrategy = require('passport-google-oauth2').Strategy

// Serialize authenticated user
module.exports = passport.serializeUser(function(user, done) {
	done(null, user._id)
})

// Deserialize authenticated user
module.exports = passport.deserializeUser(function(id, done){
	User.model.findById(id, function(err, user){
		if (!err) done(null, user)
		else done(err, null)
	})
})

// Local authentication
module.exports = passport.use(new LocalStrategy({
		usernameField: 'email',
		passwordField: 'password'
	},
	function(email, password, done) {
		User.model.findOne({ email: email }, function (err, user) {
			if (err) { return done(err) }
			if (!user) {
				return done(null, false, { message: 'Incorrect email.' });
			}
			user._.password.compare(password, function(err, isMatch) {
				if (!err && isMatch) {
					return done(null, user)
				} else {
					return done(null, false, { message: 'Incorrect password.' })
				}
			})
		})
	}
))

// Google oauth 2.0
module.exports = passport.use(new GoogleStrategy({
	clientID: config.google.clientID,
	clientSecret: config.google.clientSecret,
	callbackURL: config.google.callbackURL
	},
	function(accessToken, refreshToken, profile, done){
	
		// Find user from database
		User.model.findOne({ oauthID: profile.id }, function (err, user) {
			if (err) {
				console.log(err); // handle errors
			}
			if (!err && user !== null){
				done(null, user);
			} else {
			
				// Add new user to database
				user = new User.model({
					oauthID: profile.id,
					'name.full': profile.displayName,
					email: profile.email,
					password: profile._json.etag,
				})
				user.save(function(err) {
					if (err) { done(null,null) } else { done(null,user) }
				})
			}
		})
	}
))
